?qunif
qunif(0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp$X
temp[,1]
temp[1]
temp[1,]
temp[1,] * temp[2,]
sum(temp[1,] * temp[2,])
qnorm
qnorm(70, 80, 10)
qnorm(0.4, 80, 10)
qnorm(0.3, 80, 10)
qnorm(0.5, 80, 10)
qnorm(0.3, 80, 10)
qnorm(0.16, 80, 10)
qnorm(0,95, 1100, 75)
qnorm(0.95, 1100, 75)
qnorm(0.95, 1100, 75/sqrt(100))
binom
pbinom(4,5)
pbinom(4,5, 0.5)
pbinom(5,5, 0.5)
rbinom(5,5, 0.5)
rbinom(4,5, 0.5)
rbinom(4,5, 0.5)
dbinom(5,5, 0.5)
dbinom(4,5, 0.5)
dbinom(4,5, 0.5) + dbinom(5,5, 0.5)
10/sqrt(100)
dpoisson
dpoison
ppois(10, lambda=15)
setwd("~/Dropbox/MOOCs/R/reproducible/RepData_PeerAssessment1")
unzip('activity.zip')
install.packages("knitr")
data <- read.csv('activity.csv')
head data
head(data)
data[1,]
data[2,]
data[3,]
data[100,]
data[1000,]
data[2000,]
data[4000,]
data[,1]
data[,2]
data[,3]
data[,4]
hist(data$steps)
hist(log(data$steps)
hist(log(data$steps))
hist(log(data$steps))
hist(data$steps)
hist(data$steps, freq=F)
hist(data$steps, title='Histogram of number of steps')
hist(data$steps, main='Histogram of number of steps', xlab='Number of steps')
hist(data$steps, fill='#eee', main='Histogram of number of steps', xlab='Number of steps')
hist(data$steps, col='#eee', main='Histogram of number of steps', xlab='Number of steps')
hist(data$steps, col='gray', main='Histogram of number of steps', xlab='Number of steps')
median(data$steps)
mean(data$steps)
data$steps
mean(data$steps)
?mean
mean(data$steps, na.rm=T)
median(data$steps, na.rm=T)
data
data[1,]
data$date
?aggregate
aggregate(data$steps, by=list(data$date), FUN=mean)
aggregate(data$steps, by=list(data$date), FUN=sum)
steps.per.day <- aggregate(data$steps, by=list(data$date), FUN=sum)
hist(steps.per.day, col='gray', main='Histogram of number of steps per day', xlab='Number of steps per day')
steps.per.day
?mean
data.raw
data.raw <- read.csv('activity.csv')
data.raw
data.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean)
names(data.per.interval) = list('interval','steps')
plot(data.per.interval)
plot(data.per.interval$interval)
plot(data.per.interval$interval, data.per.interval$steps)
data.per.interval
?aggregate
data.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean, na.action=na.pass)
data.per.interval
data.per.intervaldata.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean, na.action=NULL)
data.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean, na.action=NULL)
data.per.interval
data.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean, na.rm=T, na.action=NULL)
data.per.interval
data.per.interval <- aggregate(data.raw$steps, by=list(data.raw$interval), FUN=mean, na.rm=T)
names(data.per.interval) = list('interval','steps')
plot(data.per.interval)
plot(data.per.interval, tyle='l')
plot(data.per.interval, type='l')
warnings()
plot(data.per.interval, type='l')
plot(data.per.interval, type='l', ylab='averaged number of steps')
max(data.per.interval)
max(data.per.interval$steps)
max(data.per.interval)
max(data.per.interval$steps)
which.max(data.per.interval$steps)
which.max(data.per.interval)
which.max(data.per.interval$steps)
data.per.interval[which.max(data.per.interval$steps)]
data.per.interval[which.max(data.per.interval$steps),]
data.per.interval[which.max(data.per.interval$steps),1]
data.per.interval[which.max(data.per.interval$steps),1]
is.na
is.na(data.raw)
is.na
count(is.na(data.raw))
length(is.na(data.raw))
sum(is.na(data.raw))
table(is.na(data.raw))
data.raw
is.na(data.raw$steps)
lapply(is.na(data.raw$steps), function(x) { })
out <- lapply(is.na(data.raw$steps), function(x) { })
out
out <- lapply(which.na(data.raw$steps), function(x) { })
is.na(data.raw$steps)
data.raw(is.na(data.raw$steps))
data.raw[is.na(data.raw$steps)]
data.raw$date[is.na(data.raw$steps)]
data.raw$interval[is.na(data.raw$steps)]
data.raw$interval[is.na(data.raw$steps)]
data.per.interval$steps
data.per.interval[na.intervals,]
data.per.interval[na.intervals,]
na.intervals <- data.raw$interval[is.na(data.raw$steps)]
data.per.interval[na.intervals,]
data.per.interval[,]
data.per.interval[data.per.interval$interval==na.intervals,]
data.per.interval
na.intervals
which(is.na(data.raw$steps))
which(is.na(data.raw$steps))
na.indices <- which(is.na(data.raw$steps))
lapply(na.indices)
lapply(na.indices, function(x){ })
lapply(na.indices, function(x){ return 1; })
lapply(na.indices, function(x){ return 1 })
lapply(na.indices, function(){ return 1; })
?lapply
na.indices <- which(is.na(data.raw$steps))
function impute() {
1
}
lapply(na.indices, FUN=impute)
impute <- function() {
1
}
lapply(na.indices, FUN=impute)
impute <- function(x) {
1
}
lapply(na.indices, FUN=impute)
impute <- function(x) {
x
}
lapply(na.indices, FUN=impute)
data.per.interval
data.raw[1700]
data.raw[[1700]]
data.raw[1700,interval]
data.raw[1700,1
data.raw[1700,1]
data.raw[1700,1]
data.raw[1700,2]
data.raw[1700,3]
data.raw[1700,]
data.raw[1700,$interval]
data.raw[1700,'interval]'
data.raw[1700,'interval]'
data.raw[1700,'interval']
data.raw[1700,'interval']
data.per.interval$interval==data.raw[1700,'interval']
data.per.interval$steps[data.per.interval$interval==data.raw[1700,'interval']]
data.per.interval$steps[data.per.interval$interval==data.raw[1700,'interval']]
na.indices <- which(is.na(data.raw$steps))
impute <- function(x) {
data.per.interval$steps[data.per.interval$interval==data.raw[1700,'interval']]
}
na.replaced.values <- lapply(na.indices, FUN=impute)
na.replaced.values
na.indices <- which(is.na(data.raw$steps))
for(index in na.indices) {
data.per.interval$steps[data.per.interval$interval==data.raw[index,'interval']]
}
na.indices <- which(is.na(data.raw$steps))
data.filled <- data.raw
for(index in na.indices) {
data.filled$steps[index] <- data.per.interval$steps[data.per.interval$interval==data.raw[index,'interval']]
}
data.filled
is.na(data.filled)
table(is.na(data.filled))
data.filled
data.filled.per.day
data.filled.per.day <- aggregate(data.filled$steps, by=list(data.filled$date), FUN=sum)
names(data.filled.per.day) = list('date','steps')
data.filled.per.day
plot(data.filled.per.day)
plot(data.filled.per.day,type="l")
plot(data.filled.per.day%steps
plot(data.filled.per.day$steps
plot(data.filled.per.day$steps)
plot(data.filled.per.day$steps)
table(data.filled.per.day$steps)
hist(data.filled.per.day$steps)
table(data.filled.per.day$steps)
table(data.filled.per.day)
table(data.filled.per.day$steps)
?table
factors
factor
factor(data.filled.per.day$steps)
data.raw
data.raw$steps
data.filled$steps
weekdays()
weekdays(data.filled$data)
weekdays(data.filled$date)
weekdays(data.filled$date)
data.filled
data.filled$date
as.date(data.filled$date)
as.Date(data.filled$date)
weekdays(as.Date(data.filled$date))
wd <- weekdays(as.Date(data.filled$date))
data.filled
data.filled$weekday <- wd
data.filled$weekday
data.filled
data.filled$weekday <- wd
wd <- weekdays(as.Date(data.filled$date)
data.filled$weekday <- ifelse(wd == 'Sunday' || wd == 'Saturday', 'weekend', 'weekday')
wd <- weekdays(as.Date(data.filled$date)
data.filled$weekday <- ifelse(wd == 'Sunday' | wd == 'Saturday', 'weekend', 'weekday')
wd <- weekdays(as.Date(data.filled$date)
data.filled$weekday <- ifelse(wd == 'Sunday', 'weekend', 'weekday')
data.filled$weekday <- ifelse(wd = 'Sunday', 'weekend', 'weekday')
data.filled$weekday <- ifelse(wd = "Sunday", "weekend", "weekday")
?ifelse
wd
wd = "Sunday"
wd <- weekdays(as.Date(data.filled$date)
)
wd
wd == "Sunday"
data.filled$weekday <- ifelse(wd == "Sunday", "weekend", "weekday")
data.filled$weekday
wd <- weekdays(as.Date(data.filled$date)
data.filled$weekday <- ifelse(wd == "Sunday" | wd == "Saturday", "weekend", "weekday")
data.filled$weekday <- ifelse(wd == "Sunday" & wd == "Saturday", "weekend", "weekday")
data.filled$weekday
data.filled$weekday <- ifelse(wd == "Sunday" || wd == "Saturday", "weekend", "weekday")
data.filled$weekday
table(data.filled$weekday)
data.filled$weekday <- ifelse((wd == "Sunday") | (wd == "Saturday"), "weekend", "weekday")
table(data.filled$weekday)
data.filled.per.interval <- aggregate(data.filled$steps, by=list(data.filled$interval, data.filled$weekday), FUN=mean)
names(data.filled.per.interval) = list('interval','steps')
data.filled.per.interval
plot(data.filled.per.interval)
data.filled.per.interval <- aggregate(data.filled$steps, by=list(data.filled$interval, data.filled$weekday), FUN=mean, na.rm=T)
names(data.filledper.interval) = list('interval','weekday','steps')
data.filled.per.interval <- aggregate(data.filled$steps, by=list(data.filled$interval, data.filled$weekday), FUN=mean, na.rm=T)
names(data.filled.per.interval) = list('interval','weekday','steps')
plot(data.filled.per.interval)
data.filled.per.interval
data.filled.per.interval$steps
plot(data.filled.per.interval$steps)
plot(data.filled.per.interval$steps[data.filled.per.interval$weekday=='weekday'])
plot(data.filled.per.interval$steps[data.filled.per.interval$weekday=='weekday'], type='l')
plot(data.filled.per.interval$steps[data.filled.per.interval$weekday=='weekday'], type='l')
par(mfrow=c(1,2))
plot(data.filled.per.interval$steps[data.filled.per.interval$weekday=='weekday'], type='l')
plot(data.filled.per.interval$steps[data.filled.per.interval$weekday=='weekend'], type='l')
